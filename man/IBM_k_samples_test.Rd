% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IBM_k_samples_test.R
\name{IBM_k_samples_test}
\alias{IBM_k_samples_test}
\title{Equality test of K unknown component distributions}
\usage{
IBM_k_samples_test(
  samples,
  admixMod,
  sim_U = NULL,
  n_sim_tab = 100,
  conf_level = 0.95,
  tune_penalty = TRUE,
  parallel = FALSE,
  n_cpu = 2
)
}
\arguments{
\item{samples}{(list) A list of the K samples to be studied, all following admixture distributions.}

\item{admixMod}{(list) A list of objects of class 'admix_model', containing useful information about distributions and parameters.}

\item{sim_U}{(default to NULL) Random draws of the inner convergence part of the contrast as defined in the IBM approach (see 'Details' below).}

\item{n_sim_tab}{Number of simulated gaussian processes when tabulating the inner convergence distribution in the IBM approach.}

\item{conf_level}{The confidence level of the K-sample test.}

\item{tune_penalty}{A boolean that allows to choose between a classical penalty term or an optimized penalty embedding some tuning parameters
(automatically optimized). Optimized penalty is particularly useful for low sample size.}

\item{parallel}{(default to FALSE) Boolean indicating whether parallel computations are performed.}

\item{n_cpu}{(default to 2) Number of cores used when parallelizing.}
}
\value{
A list of 13 elements, containing: 1) the rejection decision; 2) the confidence level of the test (1-alpha, where alpha
refers to the first-type error); 3) the test p-value; 4) the 95th-quantile of the contrast distribution; 5) the test
statistic value; 6) the selected rank (number of terms involved in the test statistic); 7) the terms involved in
the test statistic; 8) A boolean indicating whether the penalization corresponds to the null hypothesis has been considered;
9) the value of the penalized (potential) test statistics; 10) the selected optimal 'gamma'; 11) the selected optimal constant
'constant' involved in the penalization process; 12) the tabulated distribution of the contrast; 13) the matrix of
pairwise contrasts (distance between two samples).
}
\description{
Equality test of the unknown component distributions coming from K (K > 1) admixture models, based on the Inversion - Best
Matching (IBM) approach. Recall that we have K populations following admixture models, each one with probability
density functions (pdf) l_k = p_k*f_k + (1-p_k)*g_k, where g_k is the known pdf and l_k corresponds to the
observed sample. Perform the following hypothesis test:
H0 : f_1 = ... = f_K  against  H1 : f_i differs from f_j (i different from j, and i,j in 1,...,K).
}
\examples{
\donttest{
####### Under the null hypothesis H0 (with K=3 populations):
## Simulate mixture data:
mixt1 <- twoComp_mixt(n = 450, weight = 0.4,
                      comp.dist = list("norm", "norm"),
                      comp.param = list(list("mean" = -2, "sd" = 0.5),
                                        list("mean" = 0, "sd" = 1)))
mixt2 <- twoComp_mixt(n = 380, weight = 0.7,
                      comp.dist = list("norm", "norm"),
                      comp.param = list(list("mean" = -2, "sd" = 0.5),
                                        list("mean" = 1, "sd" = 1)))
mixt3 <- twoComp_mixt(n = 400, weight = 0.8,
                      comp.dist = list("norm", "exp"),
                      comp.param = list(list("mean" = -2, "sd" = 0.5),
                                        list("rate" = 1)))
data1 <- getmixtData(mixt1)
data2 <- getmixtData(mixt2)
data3 <- getmixtData(mixt3)

## Define the admixture models:
admixMod1 <- admix_model(knownComp_dist = mixt1$comp.dist[[2]],
                         knownComp_param = mixt1$comp.param[[2]])
admixMod2 <- admix_model(knownComp_dist = mixt2$comp.dist[[2]],
                         knownComp_param = mixt2$comp.param[[2]])
admixMod3 <- admix_model(knownComp_dist = mixt3$comp.dist[[2]],
                         knownComp_param = mixt3$comp.param[[2]])
## Perform the 3-samples test:
k_test <- IBM_k_samples_test(samples = list(data1, data2, data3),
                             admixMod = list(admixMod1, admixMod2, admixMod3),
                             sim_U = NULL, n_sim_tab = 20, conf_level = 0.95,
                             tune_penalty = FALSE, parallel = FALSE, n_cpu = 2)

####### Now under the alternative H1:
mixt1 <- twoComp_mixt(n = 450, weight = 0.4,
                      comp.dist = list("norm", "norm"),
                      comp.param = list(list("mean" = -2, "sd" = 0.5),
                                        list("mean" = 0, "sd" = 1)))
mixt2 <- twoComp_mixt(n = 380, weight = 0.7,
                      comp.dist = list("norm", "norm"),
                      comp.param = list(list("mean" = -2, "sd" = 0.5),
                                        list("mean" = 1, "sd" = 1)))
mixt3 <- twoComp_mixt(n = 400, weight = 0.8,
                      comp.dist = list("norm", "exp"),
                      comp.param = list(list("mean" = 3, "sd" = 1),
                                        list("rate" = 1)))
data1 <- getmixtData(mixt1)
data2 <- getmixtData(mixt2)
data3 <- getmixtData(mixt3)

## Define the admixture models:
admixMod1 <- admix_model(knownComp_dist = mixt1$comp.dist[[2]],
                         knownComp_param = mixt1$comp.param[[2]])
admixMod2 <- admix_model(knownComp_dist = mixt2$comp.dist[[2]],
                         knownComp_param = mixt2$comp.param[[2]])
admixMod3 <- admix_model(knownComp_dist = mixt3$comp.dist[[2]],
                         knownComp_param = mixt3$comp.param[[2]])
k_test <- IBM_k_samples_test(samples = list(data1, data2, data3),
                             admixMod = list(admixMod1, admixMod2, admixMod3),
                             sim_U = NULL, n_sim_tab = 20, conf_level = 0.95,
                             tune_penalty = FALSE, parallel = FALSE, n_cpu = 2)
}

}
\references{
\insertRef{MilhaudPommeretSalhiVandekerkhove2024b}{admix}
}
\author{
Xavier Milhaud \href{mailto:xavier.milhaud.research@gmail.com}{xavier.milhaud.research@gmail.com}
}
